{"ast":null,"code":"var strip = require('../_parsers/_strip');\n\nvar parse = require('../_parsers/parse');\n\nvar delta = require('./_delta');\n\nvar fmt = require('./_format');\n\nvar ymd = fmt.ymd;\nvar toText = fmt.toText; //wrap it up as a template\n\nvar template = function template(date) {\n  return {\n    template: 'date',\n    data: date\n  };\n};\n\nvar getBoth = function getBoth(tmpl) {\n  tmpl = strip(tmpl);\n  var arr = tmpl.split('|');\n  var from = ymd(arr.slice(1, 4));\n  var to = arr.slice(4, 7); //assume now, if 'to' is empty\n\n  if (to.length === 0) {\n    var d = new Date();\n    to = [d.getFullYear(), d.getMonth(), d.getDate()];\n  }\n\n  to = ymd(to);\n  return {\n    from: from,\n    to: to\n  };\n};\n\nvar parsers = {\n  //generic {{date|year|month|date}} template\n  date: function date(tmpl, r) {\n    var order = ['year', 'month', 'date', 'hour', 'minute', 'second', 'timezone'];\n    var obj = parse(tmpl, order);\n    var data = ymd([obj.year, obj.month, obj.date || obj.day]);\n    obj.text = toText(data); //make the replacement string\n\n    if (obj.timezone) {\n      if (obj.timezone === 'Z') {\n        obj.timezone = 'UTC';\n      }\n\n      obj.text += \" (\".concat(obj.timezone, \")\");\n    }\n\n    if (obj.hour && obj.minute) {\n      if (obj.second) {\n        obj.text = \"\".concat(obj.hour, \":\").concat(obj.minute, \":\").concat(obj.second, \", \") + obj.text;\n      } else {\n        obj.text = \"\".concat(obj.hour, \":\").concat(obj.minute, \", \") + obj.text;\n      }\n    }\n\n    if (obj.text) {\n      r.templates.push(template(obj));\n    }\n\n    return obj.text;\n  },\n  //support parsing of 'February 10, 1992'\n  natural_date: function natural_date(tmpl, r) {\n    var order = ['text'];\n    var obj = parse(tmpl, order);\n    var str = obj.text || ''; // - just a year\n\n    var date = {};\n\n    if (/^[0-9]{4}$/.test(str)) {\n      date.year = parseInt(str, 10);\n    } else {\n      //parse the date, using the js date object (for now?)\n      var txt = str.replace(/[a-z]+\\/[a-z]+/i, '');\n      txt = txt.replace(/[0-9]+:[0-9]+(am|pm)?/i, '');\n      var d = new Date(txt);\n\n      if (isNaN(d.getTime()) === false) {\n        date.year = d.getFullYear();\n        date.month = d.getMonth() + 1;\n        date.date = d.getDate();\n      }\n    }\n\n    r.templates.push(template(date));\n    return str.trim();\n  },\n  //just grab the first value, and assume it's a year\n  one_year: function one_year(tmpl, r) {\n    var order = ['year'];\n    var obj = parse(tmpl, order);\n    var year = Number(obj.year);\n    r.templates.push(template({\n      year: year\n    }));\n    return String(year);\n  },\n  //assume 'y|m|d' | 'y|m|d' // {{BirthDeathAge|B|1976|6|6|1990|8|8}}\n  two_dates: function two_dates(tmpl, r) {\n    var order = ['b', 'birth_year', 'birth_month', 'birth_date', 'death_year', 'death_month', 'death_date'];\n    var obj = parse(tmpl, order); //'b' means show birth-date, otherwise show death-date\n\n    if (obj.b && obj.b.toLowerCase() === 'b') {\n      var _date = ymd([obj.birth_year, obj.birth_month, obj.birth_date]);\n\n      r.templates.push(template(_date));\n      return toText(_date);\n    }\n\n    var date = ymd([obj.death_year, obj.death_month, obj.death_date]);\n    r.templates.push(template(date));\n    return toText(date);\n  },\n  'age': function age(tmpl) {\n    var d = getBoth(tmpl);\n    var diff = delta(d.from, d.to);\n    return diff.years || 0;\n  },\n  'diff-y': function diffY(tmpl) {\n    var d = getBoth(tmpl);\n    var diff = delta(d.from, d.to);\n\n    if (diff.years === 1) {\n      return diff.years + ' year';\n    }\n\n    return (diff.years || 0) + ' years';\n  },\n  'diff-ym': function diffYm(tmpl) {\n    var d = getBoth(tmpl);\n    var diff = delta(d.from, d.to);\n    var arr = [];\n\n    if (diff.years === 1) {\n      arr.push(diff.years + ' year');\n    } else if (diff.years && diff.years !== 0) {\n      arr.push(diff.years + ' years');\n    }\n\n    if (diff.months === 1) {\n      arr.push('1 month');\n    } else if (diff.months && diff.months !== 0) {\n      arr.push(diff.months + ' months');\n    }\n\n    return arr.join(', ');\n  },\n  'diff-ymd': function diffYmd(tmpl) {\n    var d = getBoth(tmpl);\n    var diff = delta(d.from, d.to);\n    var arr = [];\n\n    if (diff.years === 1) {\n      arr.push(diff.years + ' year');\n    } else if (diff.years && diff.years !== 0) {\n      arr.push(diff.years + ' years');\n    }\n\n    if (diff.months === 1) {\n      arr.push('1 month');\n    } else if (diff.months && diff.months !== 0) {\n      arr.push(diff.months + ' months');\n    }\n\n    if (diff.days === 1) {\n      arr.push('1 day');\n    } else if (diff.days && diff.days !== 0) {\n      arr.push(diff.days + ' days');\n    }\n\n    return arr.join(', ');\n  },\n  'diff-yd': function diffYd(tmpl) {\n    var d = getBoth(tmpl);\n    var diff = delta(d.from, d.to);\n    var arr = [];\n\n    if (diff.years === 1) {\n      arr.push(diff.years + ' year');\n    } else if (diff.years && diff.years !== 0) {\n      arr.push(diff.years + ' years');\n    } //ergh...\n\n\n    diff.days += (diff.months || 0) * 30;\n\n    if (diff.days === 1) {\n      arr.push('1 day');\n    } else if (diff.days && diff.days !== 0) {\n      arr.push(diff.days + ' days');\n    }\n\n    return arr.join(', ');\n  },\n  'diff-d': function diffD(tmpl) {\n    var d = getBoth(tmpl);\n    var diff = delta(d.from, d.to);\n    var arr = []; //ergh...\n\n    diff.days += (diff.years || 0) * 365;\n    diff.days += (diff.months || 0) * 30;\n\n    if (diff.days === 1) {\n      arr.push('1 day');\n    } else if (diff.days && diff.days !== 0) {\n      arr.push(diff.days + ' days');\n    }\n\n    return arr.join(', ');\n  }\n};\nmodule.exports = parsers;","map":null,"metadata":{},"sourceType":"script"}