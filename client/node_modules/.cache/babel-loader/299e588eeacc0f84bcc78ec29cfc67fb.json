{"ast":null,"code":"//find all the pairs of '[[...[[..]]...]]' in the text\n//used to properly root out recursive template calls, [[.. [[...]] ]]\n//basically just adds open tags, and subtracts closing tags\nfunction find_recursive(opener, closer, text) {\n  var out = [];\n  var last = [];\n  var chars = text.split('');\n  var open = 0;\n\n  for (var i = 0; i < chars.length; i++) {\n    var c = text[i]; //increment open tag\n\n    if (c === opener) {\n      open += 1;\n    } //decrement close tag\n    else if (c === closer) {\n        open -= 1;\n\n        if (open < 0) {\n          open = 0;\n        }\n      } else if (last.length === 0) {\n        // If we're not inside of a pair of delimiters, we can discard the current letter.\n        // The return of this function is only used to extract images.\n        continue;\n      }\n\n    last.push(c);\n\n    if (open === 0 && last.length > 0) {\n      //first, fix botched parse\n      var open_count = 0;\n      var close_count = 0;\n\n      for (var j = 0; j < last.length; j++) {\n        if (last[j] === opener) {\n          open_count++;\n        } else if (last[j] === closer) {\n          close_count++;\n        }\n      } //is it botched?\n\n\n      if (open_count > close_count) {\n        last.push(closer);\n      } //looks good, keep it\n\n\n      out.push(last.join(''));\n      last = [];\n    }\n  }\n\n  return out;\n}\n\nmodule.exports = find_recursive; // console.log(find_recursive('{', '}', 'he is president. {{nowrap|{{small|(1995–present)}}}} he lives in texas'));\n// console.log(find_recursive(\"{\", \"}\", \"this is fun {{nowrap{{small1995–present}}}} and it works\"))","map":null,"metadata":{},"sourceType":"script"}