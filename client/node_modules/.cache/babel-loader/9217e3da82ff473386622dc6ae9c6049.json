{"ast":null,"code":"var toJSON = require('./toJson');\n\nvar toMarkdown = require('./toMarkdown');\n\nvar toHtml = require('./toHtml');\n\nvar toLatex = require('./toLatex');\n\nvar setDefaults = require('../_lib/setDefaults');\n\nvar defaults = {\n  sentences: true,\n  lists: true,\n  images: true\n};\n\nvar Paragraph = function Paragraph(data) {\n  Object.defineProperty(this, 'data', {\n    enumerable: false,\n    value: data\n  });\n};\n\nvar methods = {\n  sentences: function sentences(num) {\n    if (typeof num === 'number') {\n      return this.data.sentences[num];\n    }\n\n    return this.data.sentences || [];\n  },\n  references: function references(num) {\n    if (typeof num === 'number') {\n      return this.data.references[num];\n    }\n\n    return this.data.references;\n  },\n  lists: function lists(num) {\n    if (typeof num === 'number') {\n      return this.data.lists[num];\n    }\n\n    return this.data.lists;\n  },\n  images: function images(num) {\n    if (typeof num === 'number') {\n      return this.data.images[num];\n    }\n\n    return this.data.images || [];\n  },\n  links: function links(n) {\n    var arr = [];\n    this.sentences().forEach(function (s) {\n      arr = arr.concat(s.links(n));\n    });\n\n    if (typeof n === 'number') {\n      return arr[n];\n    } else if (typeof n === 'string') {\n      //grab a specific link like .links('Fortnight')\n      n = n.charAt(0).toUpperCase() + n.substring(1); //titlecase it\n\n      var link = arr.find(function (o) {\n        return o.page === n;\n      });\n      return link === undefined ? [] : [link];\n    }\n\n    return arr || [];\n  },\n  interwiki: function interwiki(num) {\n    var arr = [];\n    this.sentences().forEach(function (s) {\n      arr = arr.concat(s.interwiki());\n    });\n\n    if (typeof num === 'number') {\n      return arr[num];\n    }\n\n    return arr || [];\n  },\n  markdown: function markdown(options) {\n    options = setDefaults(options, defaults);\n    return toMarkdown(this, options);\n  },\n  html: function html(options) {\n    options = setDefaults(options, defaults);\n    return toHtml(this, options);\n  },\n  text: function text(options) {\n    options = setDefaults(options, defaults);\n    var str = this.sentences().map(function (s) {\n      return s.text(options);\n    }).join(' ');\n    this.lists().forEach(function (list) {\n      str += '\\n' + list.text();\n    });\n    return str;\n  },\n  latex: function latex(options) {\n    options = setDefaults(options, defaults);\n    return toLatex(this, options);\n  },\n  json: function json(options) {\n    options = setDefaults(options, defaults);\n    return toJSON(this, options);\n  }\n};\nmethods.citations = methods.references;\nObject.keys(methods).forEach(function (k) {\n  Paragraph.prototype[k] = methods[k];\n});\nmodule.exports = Paragraph;","map":null,"metadata":{},"sourceType":"script"}