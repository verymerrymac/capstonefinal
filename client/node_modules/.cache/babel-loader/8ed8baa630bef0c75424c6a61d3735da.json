{"ast":null,"code":"var parse = require('../_parsers/parse');\n\nvar templates = {\n  //a convulated way to make a xml tag - https://en.wikipedia.org/wiki/Template:Tag\n  tag: function tag(tmpl) {\n    var obj = parse(tmpl, ['tag', 'open']);\n    var ignore = {\n      span: true,\n      div: true,\n      p: true\n    }; //pair, empty, close, single\n\n    if (!obj.open || obj.open === 'pair') {\n      //just skip generating spans and things..\n      if (ignore[obj.tag]) {\n        return obj.content || '';\n      }\n\n      return \"<\".concat(obj.tag, \" \").concat(obj.attribs || '', \">\").concat(obj.content || '', \"</\").concat(obj.tag, \">\");\n    }\n\n    return '';\n  },\n  //dumb inflector - https://en.wikipedia.org/wiki/Template:Plural\n  plural: function plural(tmpl) {\n    tmpl = tmpl.replace(/plural:/, 'plural|');\n    var order = ['num', 'word'];\n    var obj = parse(tmpl, order);\n    var num = Number(obj.num);\n    var word = obj.word;\n\n    if (num !== 1) {\n      if (/.y$/.test(word)) {\n        word = word.replace(/y$/, 'ies');\n      } else {\n        word += 's';\n      }\n    }\n\n    return num + ' ' + word;\n  },\n  // https://en.wikipedia.org/wiki/Template:First_word\n  'first word': function firstWord(tmpl) {\n    var obj = parse(tmpl, ['text']);\n    var str = obj.text;\n\n    if (obj.sep) {\n      return str.split(obj.sep)[0];\n    }\n\n    return str.split(' ')[0];\n  },\n  'trunc': function trunc(tmpl) {\n    var order = ['str', 'len'];\n    var obj = parse(tmpl, order);\n    return obj.str.substr(0, obj.len);\n  },\n  'str mid': function strMid(tmpl) {\n    var order = ['str', 'start', 'end'];\n    var obj = parse(tmpl, order);\n    var start = parseInt(obj.start, 10) - 1;\n    var end = parseInt(obj.end, 10);\n    return obj.str.substr(start, end);\n  },\n  //grab the first, second or third pipe\n  'p1': function p1(tmpl) {\n    var order = ['one'];\n    return parse(tmpl, order).one;\n  },\n  'p2': function p2(tmpl) {\n    var order = ['one', 'two'];\n    return parse(tmpl, order).two;\n  },\n  'p3': function p3(tmpl) {\n    var order = ['one', 'two', 'three'];\n    return parse(tmpl, order).three;\n  },\n  //formatting things - https://en.wikipedia.org/wiki/Template:Nobold\n  braces: function braces(tmpl) {\n    var obj = parse(tmpl, ['text']);\n    var attrs = '';\n\n    if (obj.list) {\n      attrs = '|' + obj.list.join('|');\n    }\n\n    return '{{' + (obj.text || '') + attrs + '}}';\n  },\n  nobold: function nobold(tmpl) {\n    return parse(tmpl, ['text']).text || '';\n  },\n  noitalic: function noitalic(tmpl) {\n    return parse(tmpl, ['text']).text || '';\n  },\n  nocaps: function nocaps(tmpl) {\n    return parse(tmpl, ['text']).text || '';\n  },\n  syntaxhighlight: function syntaxhighlight(tmpl, r) {\n    var obj = parse(tmpl);\n    r.templates.push(obj);\n    return obj.code || '';\n  },\n  samp: function samp(tmpl, r) {\n    var obj = parse(tmpl, ['1']);\n    r.templates.push(obj);\n    return obj['1'] || '';\n  },\n  //https://en.wikipedia.org/wiki/Template:Visible_anchor\n  vanchor: function vanchor(tmpl) {\n    return parse(tmpl, ['text']).text || '';\n  },\n  //https://en.wikipedia.org/wiki/Template:Resize\n  resize: function resize(tmpl) {\n    return parse(tmpl, ['size', 'text']).text || '';\n  },\n  //https://en.wikipedia.org/wiki/Template:Ra\n  ra: function ra(tmpl) {\n    var obj = parse(tmpl, ['hours', 'minutes', 'seconds']);\n    return [obj.hours || 0, obj.minutes || 0, obj.seconds || 0].join(':');\n  },\n  //https://en.wikipedia.org/wiki/Template:Deg2HMS\n  deg2hms: function deg2hms(tmpl) {\n    //this template should do the conversion\n    var obj = parse(tmpl, ['degrees']);\n    return (obj.degrees || '') + '°';\n  },\n  hms2deg: function hms2deg(tmpl) {\n    //this template should do the conversion too\n    var obj = parse(tmpl, ['hours', 'minutes', 'seconds']);\n    return [obj.hours || 0, obj.minutes || 0, obj.seconds || 0].join(':');\n  },\n  decdeg: function decdeg(tmpl) {\n    //this template should do the conversion too\n    var obj = parse(tmpl, ['deg', 'min', 'sec', 'hem', 'rnd']);\n    return (obj.deg || obj.degrees) + '°';\n  },\n  rnd: function rnd(tmpl) {\n    //this template should do the conversion too\n    var obj = parse(tmpl, ['decimal']);\n    return obj.decimal || '';\n  },\n  //https://en.wikipedia.org/wiki/Template:DEC\n  dec: function dec(tmpl) {\n    var obj = parse(tmpl, ['degrees', 'minutes', 'seconds']);\n    var str = (obj.degrees || 0) + '°';\n\n    if (obj.minutes) {\n      str += obj.minutes + \"\\u2032\";\n    }\n\n    if (obj.seconds) {\n      str += obj.seconds + '″';\n    }\n\n    return str;\n  },\n  //https://en.wikipedia.org/wiki/Template:Val\n  val: function val(tmpl) {\n    var obj = parse(tmpl, ['number', 'uncertainty']);\n    var str = obj.number || ''; //prefix/suffix\n\n    if (obj.p) {\n      str = obj.p + str;\n    }\n\n    if (obj.s) {\n      str = obj.s + str;\n    } //add units, too\n\n\n    if (obj.u || obj.ul || obj.upl) {\n      str = str + ' ' + (obj.u || obj.ul || obj.upl);\n    }\n\n    return str;\n  }\n}; //aliases\n\ntemplates['rndfrac'] = templates.rnd;\ntemplates['rndnear'] = templates.rnd; //templates that we simply grab their insides as plaintext\n\nvar inline = ['nowrap', 'big', 'cquote', 'pull quote', 'small', 'smaller', 'midsize', 'larger', 'big', 'kbd', 'bigger', 'large', 'mono', 'strongbad', 'stronggood', 'huge', 'xt', 'xt2', '!xt', 'xtn', 'xtd', 'dc', 'dcr', 'mxt', '!mxt', 'mxtn', 'mxtd', 'bxt', '!bxt', 'bxtn', 'bxtd', 'delink', //https://en.wikipedia.org/wiki/Template:Delink\n//half-supported\n'pre', 'var', 'mvar', 'pre2', 'code'];\ninline.forEach(function (k) {\n  templates[k] = function (tmpl) {\n    return parse(tmpl, ['text']).text || '';\n  };\n});\nmodule.exports = templates;","map":null,"metadata":{},"sourceType":"script"}