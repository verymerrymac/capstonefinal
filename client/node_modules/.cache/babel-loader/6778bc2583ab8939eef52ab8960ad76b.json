{"ast":null,"code":"//grab the content of any article, off the api\nvar request = require('./_request');\n\nvar makeUrl = require('./_url');\n\nvar getParams = require('./_params');\n\nvar parseDoc = require('../01-document'); //num pages per request\n\n\nvar MAX_PAGES = 5; //this data-format from mediawiki api is nutso\n\nvar postProcess = function postProcess(data) {\n  var pages = Object.keys(data.query.pages);\n  var docs = pages.map(function (id) {\n    var page = data.query.pages[id] || {};\n\n    if (page.hasOwnProperty('missing') || page.hasOwnProperty('invalid')) {\n      return null;\n    }\n\n    var text = page.revisions[0]['*']; //us the 'generator' result format, for the random() method\n\n    if (!text && page.revisions[0].slots) {\n      text = page.revisions[0].slots.main['*'];\n    }\n\n    var opt = {\n      title: page.title,\n      pageID: page.pageid\n    };\n\n    try {\n      return parseDoc(text, opt);\n    } catch (e) {\n      console.error(e);\n      throw e;\n    }\n  });\n  return docs;\n}; //recursive fn to fetch groups of pages, serially\n\n\nvar doPages = function doPages(pages, results, lang, options, cb) {\n  var todo = pages.slice(0, MAX_PAGES);\n  var url = makeUrl(todo, lang, options);\n  var p = request(url, options);\n  p.then(function (wiki) {\n    var res = postProcess(wiki, options);\n    results = results.concat(res);\n    var remain = pages.slice(MAX_PAGES);\n\n    if (remain.length > 0) {\n      return doPages(remain, results, lang, options, cb); //recursive\n    }\n\n    return cb(results);\n  }).catch(function (e) {\n    console.error('wtf_wikipedia error: ' + e);\n    cb(results);\n  });\n}; //grab a single, or list of pages (or ids)\n\n\nvar fetchPage = function fetchPage() {\n  var pages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var a = arguments.length > 1 ? arguments[1] : undefined;\n  var b = arguments.length > 2 ? arguments[2] : undefined;\n  var c = arguments.length > 3 ? arguments[3] : undefined;\n\n  if (typeof pages !== 'object') {\n    pages = [pages];\n  }\n\n  var _getParams = getParams(a, b, c),\n      lang = _getParams.lang,\n      options = _getParams.options,\n      callback = _getParams.callback;\n\n  return new Promise(function (resolve, reject) {\n    // courtesy-check for spamming wp servers\n    if (pages.length > 500) {\n      console.error('wtf_wikipedia error: Requested ' + pages.length + ' pages.');\n      reject('Requested too many pages, exiting.');\n      return;\n    }\n\n    doPages(pages, [], lang, options, function (docs) {\n      docs = docs.filter(function (d) {\n        return d !== null;\n      }); //return the first doc, if we only asked for one\n\n      if (pages.length === 1) {\n        docs = docs[0];\n      }\n\n      docs = docs || null; //support 'err-back' format\n\n      if (callback && typeof callback === 'function') {\n        callback(null, docs);\n      }\n\n      resolve(docs);\n    });\n  });\n};\n\nmodule.exports = fetchPage;","map":null,"metadata":{},"sourceType":"script"}