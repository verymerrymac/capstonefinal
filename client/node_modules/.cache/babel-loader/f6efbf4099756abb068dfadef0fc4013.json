{"ast":null,"code":"// const helpers = require('../_lib/helpers');\nvar parse_interwiki = require('./interwiki');\n\nvar ignore_links = /^:?(category|catégorie|Kategorie|Categoría|Categoria|Categorie|Kategoria|تصنيف|image|file|image|fichier|datei|media):/i;\nvar external_link = /\\[(https?|news|ftp|mailto|gopher|irc)(:\\/\\/[^\\]\\| ]{4,1500})([\\| ].*?)?\\]/g;\nvar link_reg = /\\[\\[(.{0,160}?)\\]\\]([a-z']+)?(\\w{0,10})/gi; //allow dangling suffixes - \"[[flanders]]'s\"\n// const i18n = require('../_data/i18n');\n// const isFile = new RegExp('(' + i18n.images.concat(i18n.files).join('|') + '):', 'i');\n\nvar external_links = function external_links(links, str) {\n  str.replace(external_link, function (all, protocol, link, text) {\n    text = text || '';\n    links.push({\n      type: 'external',\n      site: protocol + link,\n      text: text.trim()\n    });\n    return text;\n  });\n  return links;\n};\n\nvar internal_links = function internal_links(links, str) {\n  //regular links\n  str.replace(link_reg, function (_, s, apostrophe) {\n    var txt = null; //make a copy of original\n\n    var link = s;\n\n    if (s.match(/\\|/)) {\n      //replacement link [[link|text]]\n      s = s.replace(/\\[\\[(.{2,100}?)\\]\\](\\w{0,10})/g, '$1$2'); //remove ['s and keep suffix\n\n      link = s.replace(/(.{2,100})\\|.{0,200}/, '$1'); //replaced links\n\n      txt = s.replace(/.{2,100}?\\|/, ''); //handle funky case of [[toronto|]]\n\n      if (txt === null && link.match(/\\|$/)) {\n        link = link.replace(/\\|$/, '');\n        txt = link;\n      }\n    } //kill off non-wikipedia namespaces\n\n\n    if (link.match(ignore_links)) {\n      return s;\n    } //kill off just these just-anchor links [[#history]]\n\n\n    if (link.match(/^#/i)) {\n      return s;\n    } //remove anchors from end [[toronto#history]]\n\n\n    var obj = {\n      page: link\n    };\n    obj.page = obj.page.replace(/#(.*)/, function (a, b) {\n      obj.anchor = b;\n      return '';\n    }); //grab any fr:Paris parts\n\n    obj = parse_interwiki(obj);\n\n    if (txt !== null && txt !== obj.page) {\n      obj.text = txt;\n    } //finally, support [[link]]'s apostrophe\n\n\n    if (apostrophe === '\\'s') {\n      obj.text = obj.text || obj.page;\n      obj.text += apostrophe;\n    } //titlecase it, if necessary\n\n\n    if (obj.page && /^[A-Z]/.test(obj.page) === false) {\n      if (!obj.text) {\n        obj.text = obj.page;\n      }\n\n      obj.page = obj.page.charAt(0).toUpperCase() + obj.page.substring(1);\n    }\n\n    links.push(obj);\n    return s;\n  });\n  return links;\n}; //grab an array of internal links in the text\n\n\nvar parse_links = function parse_links(str) {\n  var links = []; //first, parse external links\n\n  links = external_links(links, str); //internal links\n\n  links = internal_links(links, str);\n\n  if (links.length === 0) {\n    return undefined;\n  }\n\n  return links;\n};\n\nmodule.exports = parse_links;","map":null,"metadata":{},"sourceType":"script"}