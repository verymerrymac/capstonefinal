{"ast":null,"code":"var i18n = require('../_data/i18n');\n\nvar template_reg = new RegExp('\\\\{\\\\{ ?(' + i18n.disambigs.join('|') + ')(\\\\|[a-z, =]*?)? ?\\\\}\\\\}', 'i'); //special disambig-templates en-wikipedia uses\n\nvar d = ' disambiguation';\nvar english = ['airport', 'biology' + d, 'call sign' + d, 'caselaw' + d, 'chinese title' + d, 'dab', 'dab', 'disamb', 'disambig', 'disambiguation cleanup', 'genus' + d, 'geodis', 'hndis', 'hospital' + d, 'lake index', 'letter' + d, 'letter-number combination' + d, 'mathematical' + d, 'military unit' + d, 'mountainindex', 'number' + d, 'phonetics' + d, 'place name' + d, 'place name' + d, 'portal' + d, 'road' + d, 'school' + d, 'setindex', 'ship index', 'species latin name abbreviation' + d, 'species latin name' + d, 'split dab', 'sport index', 'station' + d, 'synagogue' + d, 'taxonomic authority' + d, 'taxonomy' + d, 'wp disambig'];\nvar enDisambigs = new RegExp('\\\\{\\\\{ ?(' + english.join('|') + ')(\\\\|[a-z, =]*?)? ?\\\\}\\\\}', 'i');\n\nvar isDisambig = function isDisambig(wiki) {\n  //test for {{disambiguation}} templates\n  if (template_reg.test(wiki) === true) {\n    return true;\n  } //more english-centric disambiguation templates\n  //{{hndis}}, etc\n\n\n  if (enDisambigs.test(wiki) === true) {\n    return true;\n  } //try 'may refer to' on first line for en-wiki?\n  // let firstLine = wiki.match(/^.+?\\n/);\n  // if (firstLine !== null && firstLine[0]) {\n  //   if (/ may refer to/i.test(firstLine) === true) {\n  //     return true;\n  //   }\n  // }\n\n\n  return false;\n};\n\nmodule.exports = {\n  isDisambig: isDisambig\n};","map":null,"metadata":{},"sourceType":"script"}