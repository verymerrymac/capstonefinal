{"ast":null,"code":"// every value in {{tmpl|a|b|c}} needs a name\n// here we come up with names for them\nvar hasKey = /^[ \\x2D\\.0-9_a-z\\xC0-\\xFF\\u017F\\u1E9E\\u212A\\u212B]+=/i; //templates with these properties are asking for trouble\n\nvar reserved = {\n  template: true,\n  list: true,\n  prototype: true\n}; //turn 'key=val' into {key:key, val:val}\n\nvar parseKey = function parseKey(str) {\n  var parts = str.split('=');\n  var key = parts[0] || '';\n  key = key.toLowerCase().trim();\n  var val = parts.slice(1).join('='); //don't let it be called 'template'..\n\n  if (reserved.hasOwnProperty(key)) {\n    key = '_' + key;\n  }\n\n  return {\n    key: key,\n    val: val.trim()\n  };\n}; //turn [a, b=v, c] into {'1':a, b:v, '2':c}\n\n\nvar keyMaker = function keyMaker(arr, order) {\n  var o = 0;\n  return arr.reduce(function (h, str) {\n    str = (str || '').trim(); //support named keys - 'foo=bar'\n\n    if (hasKey.test(str) === true) {\n      var res = parseKey(str);\n\n      if (res.key) {\n        h[res.key] = res.val;\n        return h;\n      }\n    } //try a key from given 'order' names\n\n\n    if (order && order[o]) {\n      var key = order[o]; //here goes!\n\n      h[key] = str;\n    } else {\n      h.list = h.list || [];\n      h.list.push(str);\n    }\n\n    o += 1;\n    return h;\n  }, {});\n};\n\nmodule.exports = keyMaker;","map":null,"metadata":{},"sourceType":"script"}