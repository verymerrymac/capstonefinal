{"ast":null,"code":"var parse = require('../../templates/_parsers/parse'); // const parse = require('../../templates/wikipedia/page').citation;\n\n\nvar parseSentence = require('../../04-sentence').oneSentence;\n\nvar Reference = require('./Reference'); //structured Cite templates - <ref>{{Cite..</ref>\n\n\nvar hasCitation = function hasCitation(str) {\n  return /^ *?\\{\\{ *?(cite|citation)/i.test(str) && /\\}\\} *?$/.test(str) && /citation needed/i.test(str) === false;\n};\n\nvar parseCitation = function parseCitation(tmpl) {\n  var obj = parse(tmpl);\n  obj.type = obj.template.replace(/cite /, '');\n  obj.template = 'citation';\n  return obj;\n}; //handle unstructured ones - <ref>some text</ref>\n\n\nvar parseInline = function parseInline(str) {\n  var obj = parseSentence(str) || {};\n  return {\n    template: 'citation',\n    type: 'inline',\n    data: {},\n    inline: obj\n  };\n}; // parse <ref></ref> xml tags\n\n\nvar parseRefs = function parseRefs(wiki, data) {\n  var references = [];\n  wiki = wiki.replace(/ ?<ref>([\\s\\S]{0,1800}?)<\\/ref> ?/gi, function (a, tmpl) {\n    if (hasCitation(tmpl)) {\n      var obj = parseCitation(tmpl);\n\n      if (obj) {\n        references.push(obj);\n      }\n\n      wiki = wiki.replace(tmpl, '');\n    } else {\n      references.push(parseInline(tmpl));\n    }\n\n    return ' ';\n  }); // <ref name=\"\"/>\n\n  wiki = wiki.replace(/ ?<ref [^>]{0,200}?\\/> ?/gi, ' '); // <ref name=\"\"></ref>\n\n  wiki = wiki.replace(/ ?<ref [^>]{0,200}?>([\\s\\S]{0,1800}?)<\\/ref> ?/gi, function (a, tmpl) {\n    if (hasCitation(tmpl)) {\n      var obj = parseCitation(tmpl);\n\n      if (obj) {\n        references.push(obj);\n      }\n\n      wiki = wiki.replace(tmpl, '');\n    } else {\n      references.push(parseInline(tmpl));\n    }\n\n    return ' ';\n  }); //now that we're done with xml, do a generic + dangerous xml-tag removal\n\n  wiki = wiki.replace(/ ?<[ \\/]?[a-z0-9]{1,8}[a-z0-9=\" ]{2,20}[ \\/]?> ?/g, ' '); //<samp name=\"asd\">\n\n  data.references = references.map(function (r) {\n    return new Reference(r);\n  });\n  return wiki;\n};\n\nmodule.exports = parseRefs;","map":null,"metadata":{},"sourceType":"script"}