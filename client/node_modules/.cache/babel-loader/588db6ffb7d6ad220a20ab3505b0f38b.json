{"ast":null,"code":"//remove the top/bottom off the template\nvar strip = require('./_strip');\n\nvar fmtName = require('./_fmtName');\n\nvar parseSentence = require('../../04-sentence').oneSentence;\n\nvar pipeSplitter = require('./01-pipe-splitter');\n\nvar keyMaker = require('./02-keyMaker');\n\nvar cleanup = require('./03-cleanup'); // most templates just want plaintext...\n\n\nvar makeFormat = function makeFormat(str, fmt) {\n  var s = parseSentence(str); //support various output formats\n\n  if (fmt === 'json') {\n    return s.json();\n  } else if (fmt === 'raw') {\n    return s;\n  } //default to flat text\n\n\n  return s.text();\n}; //\n\n\nvar parser = function parser(tmpl, order, fmt) {\n  order = order || []; //renomove {{}}'s\n\n  tmpl = strip(tmpl || '');\n  var arr = pipeSplitter(tmpl); //get template name\n\n  var name = arr.shift(); //name each value\n\n  var obj = keyMaker(arr, order); //remove wiki-junk\n\n  obj = cleanup(obj); //is this a infobox/reference?\n  // let known = isKnown(obj);\n  //using '|1=content' is an escaping-thing..\n\n  if (obj['1'] && order[0] && obj.hasOwnProperty(order[0]) === false) {\n    //move it over..\n    obj[order[0]] = obj['1'];\n    delete obj['1'];\n  }\n\n  Object.keys(obj).forEach(function (k) {\n    if (k === 'list') {\n      obj[k] = obj[k].map(function (v) {\n        return makeFormat(v, fmt);\n      });\n      return;\n    }\n\n    obj[k] = makeFormat(obj[k], fmt);\n  }); //add the template name\n\n  if (name) {\n    obj.template = fmtName(name);\n  }\n\n  return obj;\n};\n\nmodule.exports = parser;","map":null,"metadata":{},"sourceType":"script"}