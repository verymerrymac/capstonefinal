{"ast":null,"code":"//remove top-bottoms\nvar cleanup = function cleanup(lines) {\n  lines = lines.filter(function (line) {\n    //a '|+' row is a 'table caption', remove it.\n    return line && /^\\|\\+/.test(line) !== true;\n  });\n\n  if (/^{\\|/.test(lines[0]) === true) {\n    lines.shift();\n  }\n\n  if (/^\\|}/.test(lines[lines.length - 1]) === true) {\n    lines.pop();\n  }\n\n  if (/^\\|-/.test(lines[0]) === true) {\n    lines.shift();\n  }\n\n  return lines;\n}; //turn newline seperated into '|-' seperated\n\n\nvar findRows = function findRows(lines) {\n  var rows = [];\n  var row = [];\n  lines = cleanup(lines);\n\n  for (var i = 0; i < lines.length; i += 1) {\n    var line = lines[i]; //'|-' is a row-seperator\n\n    if (/^\\|-/.test(line) === true) {\n      //okay, we're done the row\n      if (row.length > 0) {\n        rows.push(row);\n        row = [];\n      }\n    } else {\n      //look for '||' inline row-splitter\n      line = line.split(/(?:\\|\\||!!)/); //support newline -> '||'\n\n      if (!line[0] && line[1]) {\n        line.shift();\n      }\n\n      line.forEach(function (l) {\n        l = l.replace(/^\\| */, '');\n        l = l.trim();\n        row.push(l);\n      });\n    }\n  } //finish the last one\n\n\n  if (row.length > 0) {\n    rows.push(row);\n  }\n\n  return rows;\n};\n\nmodule.exports = findRows;","map":null,"metadata":{},"sourceType":"script"}