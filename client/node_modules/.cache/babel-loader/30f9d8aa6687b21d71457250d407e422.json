{"ast":null,"code":"var toMarkdown = require('./toMarkdown');\n\nvar toHtml = require('./toHtml');\n\nvar toJSON = require('./toJson');\n\nvar toLatex = require('./toLatex');\n\nvar setDefaults = require('../_lib/setDefaults');\n\nvar aliasList = require('../_lib/aliases');\n\nvar defaults = {\n  tables: true,\n  references: true,\n  paragraphs: true,\n  templates: true,\n  infoboxes: true\n}; //the stuff between headings - 'History' section for example\n\nvar Section = function Section(data) {\n  this.depth = data.depth;\n  this.doc = null;\n  this._title = data.title || '';\n  Object.defineProperty(this, 'doc', {\n    enumerable: false,\n    value: null\n  });\n  Object.defineProperty(this, 'data', {\n    enumerable: false,\n    value: data\n  });\n};\n\nvar methods = {\n  title: function title() {\n    return this._title || '';\n  },\n  index: function index() {\n    if (!this.doc) {\n      return null;\n    }\n\n    var index = this.doc.sections().indexOf(this);\n\n    if (index === -1) {\n      return null;\n    }\n\n    return index;\n  },\n  indentation: function indentation() {\n    return this.depth;\n  },\n  sentences: function sentences(n) {\n    var arr = this.paragraphs().reduce(function (list, p) {\n      return list.concat(p.sentences());\n    }, []);\n\n    if (typeof n === 'number') {\n      return arr[n];\n    }\n\n    return arr || [];\n  },\n  paragraphs: function paragraphs(n) {\n    var arr = this.data.paragraphs || [];\n\n    if (typeof n === 'number') {\n      return arr[n];\n    }\n\n    return arr || [];\n  },\n  paragraph: function paragraph(n) {\n    var arr = this.data.paragraphs || [];\n\n    if (typeof n === 'number') {\n      return arr[n];\n    }\n\n    return arr[0];\n  },\n  links: function links(n) {\n    var arr = [];\n    this.infoboxes().forEach(function (templ) {\n      templ.links(n).forEach(function (link) {\n        return arr.push(link);\n      });\n    });\n    this.sentences().forEach(function (s) {\n      s.links(n).forEach(function (link) {\n        return arr.push(link);\n      });\n    });\n    this.tables().forEach(function (t) {\n      t.links(n).forEach(function (link) {\n        return arr.push(link);\n      });\n    });\n    this.lists().forEach(function (list) {\n      list.links(n).forEach(function (link) {\n        return arr.push(link);\n      });\n    });\n\n    if (typeof n === 'number') {\n      return arr[n];\n    } else if (typeof n === 'string') {\n      //grab a link like .links('Fortnight')\n      n = n.charAt(0).toUpperCase() + n.substring(1); //titlecase it\n\n      var link = arr.find(function (o) {\n        return o.page === n;\n      });\n      return link === undefined ? [] : [link];\n    }\n\n    return arr;\n  },\n  tables: function tables(clue) {\n    var arr = this.data.tables || [];\n\n    if (typeof clue === 'number') {\n      return arr[clue];\n    }\n\n    return arr;\n  },\n  templates: function templates(clue) {\n    var arr = this.data.templates || [];\n\n    if (typeof clue === 'number') {\n      return arr[clue];\n    }\n\n    if (typeof clue === 'string') {\n      clue = clue.toLowerCase();\n      return arr.filter(function (o) {\n        return o.template === clue || o.name === clue;\n      });\n    }\n\n    return arr;\n  },\n  infoboxes: function infoboxes(clue) {\n    var arr = this.data.infoboxes || [];\n\n    if (typeof clue === 'number') {\n      return arr[clue];\n    }\n\n    return arr;\n  },\n  coordinates: function coordinates(clue) {\n    var arr = [].concat(this.templates('coord'), this.templates('coor'));\n\n    if (typeof clue === 'number') {\n      return arr[clue];\n    }\n\n    return arr;\n  },\n  lists: function lists(clue) {\n    var arr = [];\n    this.paragraphs().forEach(function (p) {\n      arr = arr.concat(p.lists());\n    });\n\n    if (typeof clue === 'number') {\n      return arr[clue];\n    }\n\n    return arr;\n  },\n  interwiki: function interwiki(num) {\n    var arr = [];\n    this.paragraphs().forEach(function (p) {\n      arr = arr.concat(p.interwiki());\n    });\n\n    if (typeof num === 'number') {\n      return arr[num];\n    }\n\n    return arr || [];\n  },\n  images: function images(clue) {\n    var arr = [];\n    this.paragraphs().forEach(function (p) {\n      arr = arr.concat(p.images());\n    });\n\n    if (typeof clue === 'number') {\n      return arr[clue];\n    }\n\n    return arr || [];\n  },\n  references: function references(clue) {\n    var arr = this.data.references || [];\n\n    if (typeof clue === 'number') {\n      return arr[clue];\n    }\n\n    return arr;\n  },\n  //transformations\n  remove: function remove() {\n    if (!this.doc) {\n      return null;\n    }\n\n    var bads = {};\n    bads[this.title()] = true; //remove children too\n\n    this.children().forEach(function (sec) {\n      return bads[sec.title()] = true;\n    });\n    var arr = this.doc.data.sections;\n    arr = arr.filter(function (sec) {\n      return bads.hasOwnProperty(sec.title()) !== true;\n    });\n    this.doc.data.sections = arr;\n    return this.doc;\n  },\n  //move-around sections like in jquery\n  nextSibling: function nextSibling() {\n    if (!this.doc) {\n      return null;\n    }\n\n    var sections = this.doc.sections();\n    var index = this.index();\n\n    for (var i = index + 1; i < sections.length; i += 1) {\n      if (sections[i].depth < this.depth) {\n        return null;\n      }\n\n      if (sections[i].depth === this.depth) {\n        return sections[i];\n      }\n    }\n\n    return null;\n  },\n  lastSibling: function lastSibling() {\n    if (!this.doc) {\n      return null;\n    }\n\n    var sections = this.doc.sections();\n    var index = this.index();\n    return sections[index - 1] || null;\n  },\n  children: function children(n) {\n    if (!this.doc) {\n      return null;\n    }\n\n    var sections = this.doc.sections();\n    var index = this.index();\n    var children = []; //(immediately preceding sections with higher depth)\n\n    if (sections[index + 1] && sections[index + 1].depth > this.depth) {\n      for (var i = index + 1; i < sections.length; i += 1) {\n        if (sections[i].depth > this.depth) {\n          children.push(sections[i]);\n        } else {\n          break;\n        }\n      }\n    }\n\n    if (typeof n === 'string') {\n      n = n.toLowerCase(); // children.forEach((c) => console.log(c));\n\n      return children.find(function (s) {\n        return s.title().toLowerCase() === n;\n      });\n    }\n\n    if (typeof n === 'number') {\n      return children[n];\n    }\n\n    return children;\n  },\n  parent: function parent() {\n    if (!this.doc) {\n      return null;\n    }\n\n    var sections = this.doc.sections();\n    var index = this.index();\n\n    for (var i = index; i >= 0; i -= 1) {\n      if (sections[i] && sections[i].depth < this.depth) {\n        return sections[i];\n      }\n    }\n\n    return null;\n  },\n  markdown: function markdown(options) {\n    options = setDefaults(options, defaults);\n    return toMarkdown(this, options);\n  },\n  html: function html(options) {\n    options = setDefaults(options, defaults);\n    return toHtml(this, options);\n  },\n  text: function text(options) {\n    options = setDefaults(options, defaults);\n    var pList = this.paragraphs();\n    pList = pList.map(function (p) {\n      return p.text(options);\n    });\n    return pList.join('\\n\\n');\n  },\n  latex: function latex(options) {\n    options = setDefaults(options, defaults);\n    return toLatex(this, options);\n  },\n  json: function json(options) {\n    options = setDefaults(options, defaults);\n    return toJSON(this, options);\n  }\n}; //aliases\n\nmethods.next = methods.nextSibling;\nmethods.last = methods.lastSibling;\nmethods.previousSibling = methods.lastSibling;\nmethods.previous = methods.lastSibling;\nmethods.citations = methods.references;\nmethods.sections = methods.children;\nObject.keys(methods).forEach(function (k) {\n  Section.prototype[k] = methods[k];\n}); //add alises, too\n\nObject.keys(aliasList).forEach(function (k) {\n  Section.prototype[k] = methods[aliasList[k]];\n});\nmodule.exports = Section;","map":null,"metadata":{},"sourceType":"script"}