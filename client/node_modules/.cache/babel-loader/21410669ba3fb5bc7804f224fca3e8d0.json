{"ast":null,"code":"var fetch = require('cross-fetch');\n\nvar toMarkdown = require('./toMarkdown');\n\nvar toHtml = require('./toHtml');\n\nvar toLatex = require('./toLatex');\n\nvar toJson = require('./toJson');\n\nvar server = 'https://wikipedia.org/wiki/Special:Redirect/file/';\n\nvar aliasList = require('../_lib/aliases');\n\nvar encodeTitle = function encodeTitle(file) {\n  var title = file.replace(/^(image|file?)\\:/i, ''); //titlecase it\n\n  title = title.charAt(0).toUpperCase() + title.substring(1); //spaces to underscores\n\n  title = title.trim().replace(/ /g, '_');\n  return title;\n}; //the wikimedia image url is a little silly:\n\n\nvar makeSrc = function makeSrc(file) {\n  var title = encodeTitle(file);\n  title = encodeURIComponent(title);\n  return title;\n}; //the class for our image generation functions\n\n\nvar Image = function Image(data) {\n  Object.defineProperty(this, 'data', {\n    enumerable: false,\n    value: data\n  });\n};\n\nvar methods = {\n  file: function file() {\n    return this.data.file || '';\n  },\n  alt: function alt() {\n    var str = this.data.alt || this.data.file || '';\n    str = str.replace(/^(file|image):/i, '');\n    str = str.replace(/\\.(jpg|jpeg|png|gif|svg)/i, '');\n    return str.replace(/_/g, ' ');\n  },\n  caption: function caption() {\n    if (this.data.caption) {\n      return this.data.caption.text();\n    }\n\n    return '';\n  },\n  links: function links() {\n    if (this.data.caption) {\n      return this.data.caption.links();\n    }\n\n    return [];\n  },\n  url: function url() {\n    return server + makeSrc(this.file());\n  },\n  thumbnail: function thumbnail(size) {\n    size = size || 300;\n    var path = makeSrc(this.file());\n    return server + path + '?width=' + size;\n  },\n  format: function format() {\n    var arr = this.file().split('.');\n\n    if (arr[arr.length - 1]) {\n      return arr[arr.length - 1].toLowerCase();\n    }\n\n    return null;\n  },\n  exists: function exists(callback) {\n    var _this = this;\n\n    //check if the image (still) exists\n    return new Promise(function (cb) {\n      fetch(_this.url(), {\n        method: 'HEAD'\n      }).then(function (res) {\n        var exists = res.status === 200; //support callback non-promise form\n\n        if (callback) {\n          callback(exists);\n        }\n\n        cb(exists);\n      });\n    });\n  },\n  markdown: function markdown(options) {\n    options = options || {};\n    return toMarkdown(this, options);\n  },\n  latex: function latex(options) {\n    return toLatex(this, options);\n  },\n  html: function html(options) {\n    options = options || {};\n    return toHtml(this, options);\n  },\n  json: function json(options) {\n    options = options || {};\n    return toJson(this, options);\n  },\n  text: function text() {\n    return '';\n  }\n};\nObject.keys(methods).forEach(function (k) {\n  Image.prototype[k] = methods[k];\n}); //add alises, too\n\nObject.keys(aliasList).forEach(function (k) {\n  Image.prototype[k] = methods[aliasList[k]];\n});\nImage.prototype.src = Image.prototype.url;\nImage.prototype.thumb = Image.prototype.thumbnail;\nmodule.exports = Image;","map":null,"metadata":{},"sourceType":"script"}