{"ast":null,"code":"var sectionMap = require('./_sectionMap');\n\nvar toMarkdown = require('./toMarkdown');\n\nvar toHtml = require('./toHtml');\n\nvar toJSON = require('./toJson');\n\nvar toLatex = require('./toLatex');\n\nvar setDefaults = require('../_lib/setDefaults');\n\nvar aliasList = require('../_lib/aliases');\n\nvar Image = require('../image/Image');\n\nvar defaults = {\n  tables: true,\n  lists: true,\n  paragraphs: true\n}; //\n\nvar Document = function Document(data, options) {\n  this.options = options || {};\n  Object.defineProperty(this, 'data', {\n    enumerable: false,\n    value: data\n  });\n};\n\nvar methods = {\n  title: function title(str) {\n    //use like a setter\n    if (str !== undefined) {\n      this.data.title = str;\n      return str;\n    } //few places this could be stored..\n\n\n    if (this.data.title !== '') {\n      return this.data.title;\n    }\n\n    if (this.options.title) {\n      return this.options.title;\n    }\n\n    var guess = null; //guess the title of this page from first sentence bolding\n\n    var sen = this.sentences(0);\n\n    if (sen) {\n      guess = sen.bolds(0);\n    }\n\n    return guess;\n  },\n  isRedirect: function isRedirect() {\n    return this.data.type === 'redirect';\n  },\n  redirectTo: function redirectTo() {\n    return this.data.redirectTo;\n  },\n  isDisambiguation: function isDisambiguation() {\n    return this.data.type === 'disambiguation';\n  },\n  categories: function categories(clue) {\n    if (typeof clue === 'number') {\n      return this.data.categories[clue];\n    }\n\n    return this.data.categories || [];\n  },\n  sections: function sections(clue) {\n    var _this = this;\n\n    var arr = this.data.sections || [];\n    arr.forEach(function (sec) {\n      return sec.doc = _this;\n    }); //grab a specific section, by its title\n\n    if (typeof clue === 'string') {\n      var str = clue.toLowerCase().trim();\n      return arr.find(function (s) {\n        return s.title().toLowerCase() === str;\n      });\n    }\n\n    if (typeof clue === 'number') {\n      return arr[clue];\n    }\n\n    return arr;\n  },\n  paragraphs: function paragraphs(n) {\n    var arr = [];\n    this.data.sections.forEach(function (s) {\n      arr = arr.concat(s.paragraphs());\n    });\n\n    if (typeof n === 'number') {\n      return arr[n];\n    }\n\n    return arr;\n  },\n  paragraph: function paragraph(n) {\n    var arr = this.paragraphs() || [];\n\n    if (typeof n === 'number') {\n      return arr[n];\n    }\n\n    return arr[0];\n  },\n  sentences: function sentences(n) {\n    var arr = [];\n    this.sections().forEach(function (sec) {\n      arr = arr.concat(sec.sentences());\n    });\n\n    if (typeof n === 'number') {\n      return arr[n];\n    }\n\n    return arr;\n  },\n  images: function images(clue) {\n    var arr = sectionMap(this, 'images', null); //grab image from infobox, first\n\n    this.infoboxes().forEach(function (info) {\n      if (info.data.image) {\n        arr.unshift(info.image()); //put it at the top\n      }\n    }); //look for 'gallery' templates, too\n\n    this.templates().forEach(function (obj) {\n      if (obj.template === 'gallery') {\n        obj.images = obj.images || [];\n        obj.images.forEach(function (img) {\n          if (img instanceof Image === false) {\n            img = new Image(img);\n          }\n\n          arr.push(img);\n        });\n      }\n    });\n\n    if (typeof clue === 'number') {\n      return arr[clue];\n    }\n\n    return arr;\n  },\n  links: function links(clue) {\n    return sectionMap(this, 'links', clue);\n  },\n  interwiki: function interwiki(clue) {\n    return sectionMap(this, 'interwiki', clue);\n  },\n  lists: function lists(clue) {\n    return sectionMap(this, 'lists', clue);\n  },\n  tables: function tables(clue) {\n    return sectionMap(this, 'tables', clue);\n  },\n  templates: function templates(clue) {\n    return sectionMap(this, 'templates', clue);\n  },\n  references: function references(clue) {\n    return sectionMap(this, 'references', clue);\n  },\n  coordinates: function coordinates(clue) {\n    return sectionMap(this, 'coordinates', clue);\n  },\n  infoboxes: function infoboxes(clue) {\n    var arr = sectionMap(this, 'infoboxes'); //sort them by biggest-first\n\n    arr = arr.sort(function (a, b) {\n      if (Object.keys(a.data).length > Object.keys(b.data).length) {\n        return -1;\n      }\n\n      return 1;\n    });\n\n    if (typeof clue === 'number') {\n      return arr[clue];\n    }\n\n    return arr;\n  },\n  text: function text(options) {\n    options = setDefaults(options, defaults); //nah, skip these.\n\n    if (this.isRedirect() === true) {\n      return '';\n    }\n\n    var arr = this.sections().map(function (sec) {\n      return sec.text(options);\n    });\n    return arr.join('\\n\\n');\n  },\n  markdown: function markdown(options) {\n    options = setDefaults(options, defaults);\n    return toMarkdown(this, options);\n  },\n  latex: function latex(options) {\n    options = setDefaults(options, defaults);\n    return toLatex(this, options);\n  },\n  html: function html(options) {\n    options = setDefaults(options, defaults);\n    return toHtml(this, options);\n  },\n  json: function json(options) {\n    options = setDefaults(options, defaults);\n    return toJSON(this, options);\n  },\n  debug: function debug() {\n    console.log('\\n');\n    this.sections().forEach(function (sec) {\n      var indent = ' - ';\n\n      for (var i = 0; i < sec.depth; i += 1) {\n        indent = ' -' + indent;\n      }\n\n      console.log(indent + (sec.title() || '(Intro)'));\n    });\n    return this;\n  }\n}; //add alises\n\nObject.keys(aliasList).forEach(function (k) {\n  Document.prototype[k] = methods[aliasList[k]];\n}); //add singular-methods, too\n\nvar plurals = ['sections', 'infoboxes', 'sentences', 'citations', 'references', 'coordinates', 'tables', 'links', 'images', 'categories'];\nplurals.forEach(function (fn) {\n  var sing = fn.replace(/ies$/, 'y');\n  sing = sing.replace(/e?s$/, '');\n\n  methods[sing] = function (n) {\n    n = n || 0;\n    return this[fn](n);\n  };\n});\nObject.keys(methods).forEach(function (k) {\n  Document.prototype[k] = methods[k];\n}); //alias these ones\n\nDocument.prototype.isDisambig = Document.prototype.isDisambiguation;\nDocument.prototype.citations = Document.prototype.references;\nDocument.prototype.redirectsTo = Document.prototype.redirectTo;\nDocument.prototype.redirect = Document.prototype.redirectTo;\nDocument.prototype.redirects = Document.prototype.redirectTo;\nmodule.exports = Document;","map":null,"metadata":{},"sourceType":"script"}