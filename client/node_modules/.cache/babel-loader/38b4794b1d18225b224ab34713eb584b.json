{"ast":null,"code":"var parseTable = require('./parse');\n\nvar Table = require('./Table'); // const table_reg = /\\{\\|[\\s\\S]+?\\|\\}/g; //the largest-cities table is ~70kchars.\n\n\nvar openReg = /^\\s*{\\|/;\nvar closeReg = /^\\s*\\|}/; //tables can be recursive, so looky-here.\n\nvar findTables = function findTables(section, wiki) {\n  var list = [];\n  var lines = wiki.split('\\n');\n  var stack = [];\n\n  for (var i = 0; i < lines.length; i += 1) {\n    //start a table\n    if (openReg.test(lines[i]) === true) {\n      stack.push(lines[i]);\n      continue;\n    } //close a table\n\n\n    if (closeReg.test(lines[i]) === true) {\n      stack[stack.length - 1] += '\\n' + lines[i];\n      var table = stack.pop();\n      list.push(table);\n      continue;\n    } //keep-going on one\n\n\n    if (stack.length > 0) {\n      stack[stack.length - 1] += '\\n' + lines[i];\n    }\n  } //work-em together for a Table class\n\n\n  var tables = [];\n  list.forEach(function (str) {\n    if (str) {\n      //also reremove a newline at the end of the table (awkward)\n      wiki = wiki.replace(str + '\\n', '');\n      wiki = wiki.replace(str, '');\n      var data = parseTable(str);\n\n      if (data && data.length > 0) {\n        tables.push(new Table(data));\n      }\n    }\n  });\n\n  if (tables.length > 0) {\n    section.tables = tables;\n  }\n\n  return wiki;\n};\n\nmodule.exports = findTables;","map":null,"metadata":{},"sourceType":"script"}