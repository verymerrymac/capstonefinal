{"ast":null,"code":"var helpers = require('../_lib/helpers');\n\nvar parseLinks = require('./links');\n\nvar parseFmt = require('./formatting');\n\nvar Sentence = require('./Sentence'); // const templates = require('./templates');\n\n\nvar sentenceParser = require('./parse');\n\nvar i18n = require('../_data/i18n');\n\nvar cat_reg = new RegExp('\\\\[\\\\[:?(' + i18n.categories.join('|') + '):[^\\\\]\\\\]]{2,80}\\\\]\\\\]', 'gi'); //return only rendered text of wiki links\n\nvar resolve_links = function resolve_links(line) {\n  // categories, images, files\n  line = line.replace(cat_reg, ''); // [[Common links]]\n\n  line = line.replace(/\\[\\[:?([^|]{1,80}?)\\]\\](\\w{0,5})/g, '$1$2'); // [[File:with|Size]]\n\n  line = line.replace(/\\[\\[File:(.{2,80}?)\\|([^\\]]+?)\\]\\](\\w{0,5})/g, ''); // [[Replaced|Links]]\n\n  line = line.replace(/\\[\\[:?(.{2,80}?)\\|([^\\]]+?)\\]\\](\\w{0,5})/g, '$2$3'); // External links\n\n  line = line.replace(/\\[(https?|news|ftp|mailto|gopher|irc):\\/\\/[^\\]\\| ]{4,1500}([\\| ].*?)?\\]/g, '$2');\n  return line;\n}; // console.log(resolve_links(\"[http://www.whistler.ca www.whistler.ca]\"))\n\n\nfunction postprocess(line) {\n  //fix links\n  line = resolve_links(line); //remove empty parentheses (sometimes caused by removing templates)\n\n  line = line.replace(/\\([,;: ]*\\)/g, ''); //these semi-colons in parentheses are particularly troublesome\n\n  line = line.replace(/\\( *(; ?)+/g, '('); //dangling punctuation\n\n  line = helpers.trim_whitespace(line);\n  line = line.replace(/ +\\.$/, '.');\n  return line;\n}\n\nfunction oneSentence(str) {\n  var obj = {\n    text: postprocess(str)\n  }; //pull-out the [[links]]\n\n  var links = parseLinks(str);\n\n  if (links) {\n    obj.links = links;\n  } //pull-out the bolds and ''italics''\n\n\n  obj = parseFmt(obj); //pull-out things like {{start date|...}}\n  // obj = templates(obj);\n\n  return new Sentence(obj);\n} //turn a text into an array of sentence objects\n\n\nvar parseSentences = function parseSentences(wiki) {\n  var sentences = sentenceParser(wiki);\n  sentences = sentences.map(oneSentence); //remove :indented first line, as it is often a disambiguation\n\n  if (sentences[0] && sentences[0].text() && sentences[0].text()[0] === ':') {\n    sentences = sentences.slice(1);\n  }\n\n  return sentences;\n}; //used for consistency with other class-definitions\n\n\nvar addSentences = function addSentences(wiki, data) {\n  data.sentences = parseSentences(wiki);\n  return wiki;\n};\n\nmodule.exports = {\n  parseSentences: parseSentences,\n  oneSentence: oneSentence,\n  addSentences: addSentences\n};","map":null,"metadata":{},"sourceType":"script"}