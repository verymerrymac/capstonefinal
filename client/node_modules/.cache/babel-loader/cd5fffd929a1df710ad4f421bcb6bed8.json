{"ast":null,"code":"var Section = require('./Section');\n\nvar isReference = /^(references?|einzelnachweise|referencias|références|notes et références|脚注|referenser|bronnen|примечания):?/i; //todo support more languages\n\nvar section_reg = /(?:\\n|^)(={2,5}.{1,200}?={2,5})/g; //interpret ==heading== lines\n\nvar parse = {\n  heading: require('./heading'),\n  table: require('./table'),\n  paragraphs: require('../03-paragraph'),\n  templates: require('../templates'),\n  references: require('./reference'),\n  startEndTemplates: require('./start-to-end')\n};\n\nvar oneSection = function oneSection(wiki, data, options) {\n  wiki = parse.startEndTemplates(data, wiki, options); //parse-out the <ref></ref> tags\n\n  wiki = parse.references(wiki, data); //parse-out all {{templates}}\n\n  wiki = parse.templates(wiki, data, options); // //parse the tables\n\n  wiki = parse.table(data, wiki); //now parse all double-newlines\n\n  var res = parse.paragraphs(wiki, options);\n  data.paragraphs = res.paragraphs;\n  wiki = res.wiki;\n  data = new Section(data, wiki);\n  return data;\n}; //we re-create this in html/markdown outputs\n\n\nvar removeReferenceSection = function removeReferenceSection(sections) {\n  return sections.filter(function (s, i) {\n    if (isReference.test(s.title()) === true) {\n      if (s.paragraphs().length > 0) {\n        return true;\n      } //does it have some wacky templates?\n\n\n      if (s.templates().length > 0) {\n        return true;\n      } //what it has children? awkward\n\n\n      if (sections[i + 1] && sections[i + 1].depth > s.depth) {\n        sections[i + 1].depth -= 1; //move it up a level?...\n      }\n\n      return false;\n    }\n\n    return true;\n  });\n};\n\nvar parseSections = function parseSections(wiki, options) {\n  var split = wiki.split(section_reg);\n  var sections = [];\n\n  for (var i = 0; i < split.length; i += 2) {\n    var heading = split[i - 1] || '';\n    var content = split[i] || '';\n\n    if (content === '' && heading === '') {\n      //usually an empty 'intro' section\n      continue;\n    }\n\n    var data = {\n      title: '',\n      depth: null,\n      templates: [],\n      infoboxes: [],\n      references: []\n    }; //figure-out title/depth\n\n    parse.heading(data, heading); //parse it up\n\n    var s = oneSection(content, data, options);\n    sections.push(s);\n  } //remove empty references section\n\n\n  sections = removeReferenceSection(sections);\n  return sections;\n};\n\nmodule.exports = parseSections;","map":null,"metadata":{},"sourceType":"script"}